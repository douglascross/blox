!function(a,b){"function"==typeof define&&define.amd?define("BLOX",[],function(){return a.BLOX=b()}):"object"==typeof exports?module.exports=b():a.BLOX=b()}(this,function(){var a=augment(Object,function(b){return{constructor:function(a,b,c,d,e,f){this.x=a,this.y=b,this.z=c,this.normal=d||new THREE.Vector3,this.uv=e||new THREE.Vector2,this.facing=f||0},clone:function(){return new a(this.x,this.y,this.z,this.normal.clone(),this.uv.clone(),this.facing)},add:function(a){return this.x+=a.x,this.y+=a.y,this.z+=a.z,this},subtract:function(a){return this.x-=a.x,this.y-=a.y,this.z-=a.z,this},multiplyScalar:function(a){return this.x*=a,this.y*=a,this.z*=a,this},cross:function(a){var b=this.x,c=this.y,d=this.z;return this.x=c*a.z-d*a.y,this.y=d*a.x-b*a.z,this.z=b*a.y-c*a.x,this},normalize:function(){var a=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);return this.x/=a,this.y/=a,this.z/=a,this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lerp:function(a,b){return this.add(a.clone().subtract(this).multiplyScalar(b)),this.normal.add(a.normal.clone().sub(this.normal).multiplyScalar(b)),this.uv.add(a.uv.clone().sub(this.uv).multiplyScalar(b)),this},interpolate:function(a,b){return this.clone().lerp(a,b)},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=a.elements;return this.x=e[0]*b+e[4]*c+e[8]*d+e[12],this.y=e[1]*b+e[5]*c+e[9]*d+e[13],this.z=e[2]*b+e[6]*c+e[10]*d+e[14],this},flagPositive:function(){this.facing=1},flagNegative:function(){this.facing=-1},getFacing:function(){return this.facing}}}),b=augment(Object,function(a){var c=1e-5,d=0,e=1,f=2,g=3;return{constructor:function(a){a instanceof Array||(a=[]),this.vertices=a,a.length>0?this.calculateProperties():this.normal=this.w=void 0,this.facing=0,this.originalFace=null},calculateProperties:function(a){var b=this.vertices[0],c=this.vertices[1],d=this.vertices[2];return this.normal=c.clone().subtract(b).cross(d.clone().subtract(b)).normalize(),this.w=this.normal.clone().dot(b),a&&(this.facing=a.facing,this.originalFace=a.originalFace),this},clone:function(){var a,c,d=new b;for(a=0,c=this.vertices.length;c>a;a++)d.vertices.push(this.vertices[a].clone());return d.calculateProperties(),d.facing=this.facing,d.originalFace=this.originalFace,d},flip:function(){var a,b=[];for(this.normal.multiplyScalar(-1),this.w*=-1,a=this.vertices.length-1;a>=0;a--)b.push(this.vertices[a]);return this.vertices=b,this},classifyVertex:function(a){var b=this.normal.dot(a)-this.w;return-c>b?f:b>c?e:d},classifySide:function(a){var b,c,h,i=0,j=0,k=a.vertices.length;for(b=0;k>b;b++)c=a.vertices[b],h=this.classifyVertex(c),h===e?i++:h===f&&j++;return i>0&&0===j?e:0===i&&j>0?f:0===i&&0===j?d:g},splitPolygon:function(a,c,h,i,j){var k=this.classifySide(a);if(k===d)(this.normal.dot(a.normal)>0?c:h).push(a);else if(k===e)i.push(a);else if(k===f)j.push(a);else{var l,m,n,o,p,q,r,s,t,u=[],v=[];for(m=0,l=a.vertices.length;l>m;m++)n=(m+1)%l,q=a.vertices[m],r=a.vertices[n],o=this.classifyVertex(q),p=this.classifyVertex(r),o!=f&&u.push(q),o!=e&&v.push(q),(o|p)===g&&(s=(this.w-this.normal.dot(q))/this.normal.dot(r.clone().subtract(q)),t=q.interpolate(r,s),u.push(t),v.push(t));u.length>=3&&i.push(new b(u).calculateProperties(a)),v.length>=3&&j.push(new b(v).calculateProperties(a))}},flagPositive:function(){this.facing=1,this.vertices.forEach(function(a){a.flagPositive()})},flagNegative:function(){this.facing=-1,this.vertices.forEach(function(a){a.flagNegative()})},getFacing:function(){var a=[this.facing,0];return this.vertices.forEach(function(b){a[1]+=b.getFacing()}),a[0]+a[1]}}}),c=augment(Object,function(a){var b=2;return{constructor:function(a){var b,d,e=[],f=[];if(this.polygons=[],this.front=this.back=void 0,a instanceof Array&&0!==a.length){for(this.divider=a[0].clone(),b=0,d=a.length;d>b;b++)this.divider.splitPolygon(a[b],this.polygons,this.polygons,e,f);e.length>0&&(this.front=new c(e)),f.length>0&&(this.back=new c(f))}},isConvex:function(a){var c,d;for(c=0;c<a.length;c++)for(d=0;d<a.length;d++)if(c!==d&&a[c].classifySide(a[d])!==b)return!1;return!0},build:function(a){var b,d,e=[],f=[];for(this.divider||(this.divider=a[0].clone()),b=0,d=a.length;d>b;b++)this.divider.splitPolygon(a[b],this.polygons,this.polygons,e,f);e.length>0&&(this.front||(this.front=new c),this.front.build(e)),f.length>0&&(this.back||(this.back=new c),this.back.build(f))},allPolygons:function(){var a=this.polygons.slice();return this.front&&(a=a.concat(this.front.allPolygons())),this.back&&(a=a.concat(this.back.allPolygons())),a},clone:function(){var a=new c;return a.divider=this.divider.clone(),a.polygons=this.polygons.map(function(a){return a.clone()}),a.front=this.front&&this.front.clone(),a.back=this.back&&this.back.clone(),a},invert:function(){var a,b,c;for(a=0,b=this.polygons.length;b>a;a++)this.polygons[a].flip();return this.divider.flip(),this.front&&this.front.invert(),this.back&&this.back.invert(),c=this.front,this.front=this.back,this.back=c,this},clipPolygons:function(a){var b,c,d,e;if(!this.divider)return a.slice();for(d=[],e=[],b=0,c=a.length;c>b;b++)this.divider.splitPolygon(a[b],d,e,d,e);return this.front&&(d=this.front.clipPolygons(d)),e=this.back?this.back.clipPolygons(e):[],d.concat(e)},clipTo:function(a){this.polygons=a.clipPolygons(this.polygons),this.front&&this.front.clipTo(a),this.back&&this.back.clipTo(a)},flagPositive:function(){this.allPolygons().forEach(function(a){a.flagPositive()})},flagNegative:function(){this.allPolygons().forEach(function(a){a.flagNegative()})},getFacing:function(){var a="";return this.allPolygons().forEach(function(b){a+=(a?".":"")+b.getFacing()}),a}}}),d=augment(Object,function(e){return{constructor:function(d){var e,f,g,h,i,j,k,l,m,n,o,p,q=[];if(d instanceof THREE.Geometry)this.matrix=new THREE.Matrix4;else{if(!(d instanceof THREE.Mesh)){if(d instanceof c)return this.tree=d,this.matrix=new THREE.Matrix4,this;throw"CSG: Given geometry is unsupported"}n=d,n.updateMatrix(),this.matrix=n.matrix.clone(),o=n.material,d=n.geometry}for(e=0,f=d.faces.length;f>e;e++){for(j=d.faces[e],l=d.faceVertexUvs[0][e],p=new b,p.originalFace=j,o instanceof THREE.MultiMaterial?j._material=(o.materials||[])[j.materialIndex]:j._material=o,g=0,h=l.length;3>g;g+=1)i=j[["a","b","c","d"][g]],k=d.vertices[i],m=l?new THREE.Vector2(l[g].x,l[g].y):null,k=new a(k.x,k.y,k.z,j.vertexNormals[g],m),k.applyMatrix4(this.matrix),p.vertices.push(k);p.calculateProperties(),q.push(p)}this.tree=new c(q)},subtract:function(a){var b=this.tree.clone(),c=a.tree.clone();return b.flagPositive(),c.flagNegative(),b.invert(),b.clipTo(c),c.clipTo(b),c.invert(),c.clipTo(b),c.invert(),b.build(c.allPolygons()),b.invert(),b=new d(b),b.matrix=this.matrix,b},union:function(a){var b=this.tree.clone(),c=a.tree.clone();return b.clipTo(c),c.clipTo(b),c.invert(),c.clipTo(b),c.invert(),b.build(c.allPolygons()),b=new d(b),b.matrix=this.matrix,b},intersect:function(a){var b=this.tree.clone(),c=a.tree.clone();return b.invert(),c.clipTo(b),c.invert(),b.clipTo(c),c.clipTo(b),b.build(c.allPolygons()),b.invert(),b=new d(b),b.matrix=this.matrix,b},toGeometry:function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n=(new THREE.Matrix4).getInverse(this.matrix),o=new THREE.Geometry,p=this.tree.allPolygons(),q=p.length,r={};for(a=0;q>a;a++)for(d=p[a],e=d.vertices.length,f=d.getFacing()<0?-1:1,b=2;e>b;b++){for(l=[],m=[],i=[],c=0;3>c;c++)h=[0,b-1,b][c],j=d.vertices[h],l.push(new THREE.Vector2(j.uv.x,j.uv.y)),g=j.normal,m.push(new THREE.Vector3(g.x*f,g.y*f,g.z*f)),j=new THREE.Vector3(j.x,j.y,j.z),j.applyMatrix4(n),"undefined"!=typeof r[j.x+","+j.y+","+j.z]?i[c]=r[j.x+","+j.y+","+j.z]:(o.vertices.push(j),i[c]=r[j.x+","+j.y+","+j.z]=o.vertices.length-1);k=new THREE.Face3(i[0],i[1],i[2],new THREE.Vector3(d.normal.x,d.normal.y,d.normal.z)),k.vertexNormals=m,k._material=d.originalFace?d.originalFace._material:k._material,o.faces.push(k),o.faceVertexUvs[0].push(l)}return o},toMesh:function(){var a=this.toGeometry(),b=new THREE.MultiMaterial,c=new THREE.Mesh(a,b);c.position.setFromMatrixPosition(this.matrix),c.rotation.setFromRotationMatrix(this.matrix);var d=[];return c.geometry.faces.forEach(function(a){var b=a._material,c=d.indexOf(b);0>c&&(c=d.length,d.push(b)),a.materialIndex=c,delete a._material}),c.material.materials=d,c}}}),e=new function(){var a=Math.PI/180,b=16746496,c=function(a){console.error("BLOX: "+a)};this.toMesh=function(f){var g;if(f.shape)var h=({sphere:function(){return new THREE.SphereGeometry(f.radius,16,12)},box:function(){return new THREE.BoxGeometry(f.x,f.y,f.z)},cylinder:function(){return new THREE.CylinderGeometry(f.top,f.bottom,f.height,16)}}[f.shape]||function(){c('Shape "'+f.shape+'" not supported, use sphere, box or cylinder.')})();if(h){var i=new THREE.MeshPhongMaterial({color:f.color||b,vertexColors:THREE.VertexColors});g=new THREE.Mesh(h,i)}if(f.subtract){var j=[];f.subtract.forEach(function(a){var b=e.toMesh(a);b&&j.push(new d(b))});var k,l=g?new d(g):null;if(l||(l=j.shift()),j.length){j.forEach(function(a,b){k=k?k.union(a):a});var m=l.subtract(k);g=m.toMesh()}else g=l?l.toMesh():g}else if(f.union){var j=[];f.union.forEach(function(a){var b=e.toMesh(a);b&&j.push(new d(b))});var l=g?new d(g):null,k=l;j.forEach(function(a,b){k=k?k.union(a):a}),g=k.toMesh()}else if(f.intersect){var j=[];f.intersect.forEach(function(a){var b=e.toMesh(a);b&&j.push(new d(b))});var l=g?new d(g):null,n=l;j.forEach(function(a){n=n?n.intersect(a):a}),g=n.toMesh()}return g&&f.ops&&f.ops.forEach(function(b){if(b.scale&&g.geometry.scale.apply(g.geometry,b.scale),b.rotate){var c=b.rotate;c[0]&&g.geometry.rotateX(c[0]*a),c[1]&&g.geometry.rotateY(c[1]*a),c[2]&&g.geometry.rotateZ(c[2]*a)}b.translate&&g.geometry.translate.apply(g.geometry,b.translate)}),g},this.toGeometry=function(a){return this.toMesh(a).geometry}};return e});